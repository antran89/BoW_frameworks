# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yael', [dirname(__file__)])
        except ImportError:
            import _yael
            return _yael
        if fp is not None:
            try:
                _mod = imp.load_module('_yael', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yael = swig_import_helper()
    del swig_import_helper
else:
    import _yael
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _frompointer_and_acquire(aclass,ptr):
  r=aclass.frompointer(ptr)
  if r: r.this.acquire()
  return r


def fvec_from_pointer_long(*args):
  return _yael.fvec_from_pointer_long(*args)
fvec_from_pointer_long = _yael.fvec_from_pointer_long

def fvec_to_pointer_long(*args):
  return _yael.fvec_to_pointer_long(*args)
fvec_to_pointer_long = _yael.fvec_to_pointer_long

def dvec_from_pointer_long(*args):
  return _yael.dvec_from_pointer_long(*args)
dvec_from_pointer_long = _yael.dvec_from_pointer_long

def dvec_to_pointer_long(*args):
  return _yael.dvec_to_pointer_long(*args)
dvec_to_pointer_long = _yael.dvec_to_pointer_long
class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_DoubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.DoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.DoubleArray___setitem__(self, *args)
    def cast(self): return _yael.DoubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.DoubleArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.DoubleArray_frompointer)
    def plus(self, *args): return _yael.DoubleArray_plus(self, *args)
    def clear(self, *args): return _yael.DoubleArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.DoubleArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.DoubleArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.DoubleArray_fromstring(self, *args)
DoubleArray_swigregister = _yael.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)
cvar = _yael.cvar

def DoubleArray_frompointer(*args):
  return _yael.DoubleArray_frompointer(*args)
DoubleArray_frompointer = _yael.DoubleArray_frompointer

DoubleArray.aptr=DoubleArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(DoubleArray,ptr))

class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yael.delete_FloatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.FloatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.FloatArray___setitem__(self, *args)
    def cast(self): return _yael.FloatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.FloatArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.FloatArray_frompointer)
    def plus(self, *args): return _yael.FloatArray_plus(self, *args)
    def clear(self, *args): return _yael.FloatArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.FloatArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.FloatArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.FloatArray_fromstring(self, *args)
    def __init__(self, *args): 
        this = _yael.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
FloatArray_swigregister = _yael.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(*args):
  return _yael.FloatArray_frompointer(*args)
FloatArray_frompointer = _yael.FloatArray_frompointer

FloatArray.aptr=FloatArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatArray,ptr))

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _yael.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.IntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.IntArray___setitem__(self, *args)
    def cast(self): return _yael.IntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.IntArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.IntArray_frompointer)
    def plus(self, *args): return _yael.IntArray_plus(self, *args)
    def clear(self, *args): return _yael.IntArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.IntArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.IntArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.IntArray_fromstring(self, *args)
    def __init__(self, *args): 
        this = _yael.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
IntArray_swigregister = _yael.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(*args):
  return _yael.IntArray_frompointer(*args)
IntArray_frompointer = _yael.IntArray_frompointer

IntArray.aptr=IntArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntArray,ptr))

class bvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_bvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_bvec
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.bvec___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.bvec___setitem__(self, *args)
    def cast(self): return _yael.bvec_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.bvec_frompointer
    if _newclass:frompointer = staticmethod(_yael.bvec_frompointer)
    def plus(self, *args): return _yael.bvec_plus(self, *args)
    def clear(self, *args): return _yael.bvec_clear(self, *args)
    def copyfrom(self, *args): return _yael.bvec_copyfrom(self, *args)
    def tostring(self, *args): return _yael.bvec_tostring(self, *args)
    def fromstring(self, *args): return _yael.bvec_fromstring(self, *args)
bvec_swigregister = _yael.bvec_swigregister
bvec_swigregister(bvec)

def bvec_frompointer(*args):
  return _yael.bvec_frompointer(*args)
bvec_frompointer = _yael.bvec_frompointer

bvec.aptr=bvec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(bvec,ptr))

class int16vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int16vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int16vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_int16vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_int16vec
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.int16vec___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.int16vec___setitem__(self, *args)
    def cast(self): return _yael.int16vec_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.int16vec_frompointer
    if _newclass:frompointer = staticmethod(_yael.int16vec_frompointer)
    def plus(self, *args): return _yael.int16vec_plus(self, *args)
    def clear(self, *args): return _yael.int16vec_clear(self, *args)
    def copyfrom(self, *args): return _yael.int16vec_copyfrom(self, *args)
    def tostring(self, *args): return _yael.int16vec_tostring(self, *args)
    def fromstring(self, *args): return _yael.int16vec_fromstring(self, *args)
int16vec_swigregister = _yael.int16vec_swigregister
int16vec_swigregister(int16vec)

def int16vec_frompointer(*args):
  return _yael.int16vec_frompointer(*args)
int16vec_frompointer = _yael.int16vec_frompointer

int16vec.aptr=int16vec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(int16vec,ptr))

class uint16vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_uint16vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_uint16vec
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.uint16vec___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.uint16vec___setitem__(self, *args)
    def cast(self): return _yael.uint16vec_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.uint16vec_frompointer
    if _newclass:frompointer = staticmethod(_yael.uint16vec_frompointer)
    def plus(self, *args): return _yael.uint16vec_plus(self, *args)
    def clear(self, *args): return _yael.uint16vec_clear(self, *args)
    def copyfrom(self, *args): return _yael.uint16vec_copyfrom(self, *args)
    def tostring(self, *args): return _yael.uint16vec_tostring(self, *args)
    def fromstring(self, *args): return _yael.uint16vec_fromstring(self, *args)
uint16vec_swigregister = _yael.uint16vec_swigregister
uint16vec_swigregister(uint16vec)

def uint16vec_frompointer(*args):
  return _yael.uint16vec_frompointer(*args)
uint16vec_frompointer = _yael.uint16vec_frompointer

uint16vec.aptr=uint16vec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(uint16vec,ptr))

class lvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_lvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_lvec
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.lvec___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.lvec___setitem__(self, *args)
    def cast(self): return _yael.lvec_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.lvec_frompointer
    if _newclass:frompointer = staticmethod(_yael.lvec_frompointer)
    def plus(self, *args): return _yael.lvec_plus(self, *args)
    def clear(self, *args): return _yael.lvec_clear(self, *args)
    def copyfrom(self, *args): return _yael.lvec_copyfrom(self, *args)
    def tostring(self, *args): return _yael.lvec_tostring(self, *args)
    def fromstring(self, *args): return _yael.lvec_fromstring(self, *args)
lvec_swigregister = _yael.lvec_swigregister
lvec_swigregister(lvec)

def lvec_frompointer(*args):
  return _yael.lvec_frompointer(*args)
lvec_frompointer = _yael.lvec_frompointer

lvec.aptr=lvec.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(lvec,ptr))

class UInt64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt64Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_UInt64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_UInt64Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.UInt64Array___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.UInt64Array___setitem__(self, *args)
    def cast(self): return _yael.UInt64Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.UInt64Array_frompointer
    if _newclass:frompointer = staticmethod(_yael.UInt64Array_frompointer)
    def plus(self, *args): return _yael.UInt64Array_plus(self, *args)
    def clear(self, *args): return _yael.UInt64Array_clear(self, *args)
    def copyfrom(self, *args): return _yael.UInt64Array_copyfrom(self, *args)
    def tostring(self, *args): return _yael.UInt64Array_tostring(self, *args)
    def fromstring(self, *args): return _yael.UInt64Array_fromstring(self, *args)
UInt64Array_swigregister = _yael.UInt64Array_swigregister
UInt64Array_swigregister(UInt64Array)

def UInt64Array_frompointer(*args):
  return _yael.UInt64Array_frompointer(*args)
UInt64Array_frompointer = _yael.UInt64Array_frompointer

UInt64Array.aptr=UInt64Array.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(UInt64Array,ptr))

class IntPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_IntPtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_IntPtrArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.IntPtrArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.IntPtrArray___setitem__(self, *args)
    def cast(self): return _yael.IntPtrArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.IntPtrArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.IntPtrArray_frompointer)
    def plus(self, *args): return _yael.IntPtrArray_plus(self, *args)
    def clear(self, *args): return _yael.IntPtrArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.IntPtrArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.IntPtrArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.IntPtrArray_fromstring(self, *args)
IntPtrArray_swigregister = _yael.IntPtrArray_swigregister
IntPtrArray_swigregister(IntPtrArray)

def IntPtrArray_frompointer(*args):
  return _yael.IntPtrArray_frompointer(*args)
IntPtrArray_frompointer = _yael.IntPtrArray_frompointer

IntPtrArray.aptr=IntPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntPtrArray,ptr))

class FloatPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPtrArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_FloatPtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_FloatPtrArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.FloatPtrArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.FloatPtrArray___setitem__(self, *args)
    def cast(self): return _yael.FloatPtrArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.FloatPtrArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.FloatPtrArray_frompointer)
    def plus(self, *args): return _yael.FloatPtrArray_plus(self, *args)
    def clear(self, *args): return _yael.FloatPtrArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.FloatPtrArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.FloatPtrArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.FloatPtrArray_fromstring(self, *args)
FloatPtrArray_swigregister = _yael.FloatPtrArray_swigregister
FloatPtrArray_swigregister(FloatPtrArray)

def FloatPtrArray_frompointer(*args):
  return _yael.FloatPtrArray_frompointer(*args)
FloatPtrArray_frompointer = _yael.FloatPtrArray_frompointer

FloatPtrArray.aptr=FloatPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatPtrArray,ptr))

class BytePtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BytePtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BytePtrArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_BytePtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_BytePtrArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.BytePtrArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.BytePtrArray___setitem__(self, *args)
    def cast(self): return _yael.BytePtrArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.BytePtrArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.BytePtrArray_frompointer)
    def plus(self, *args): return _yael.BytePtrArray_plus(self, *args)
    def clear(self, *args): return _yael.BytePtrArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.BytePtrArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.BytePtrArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.BytePtrArray_fromstring(self, *args)
BytePtrArray_swigregister = _yael.BytePtrArray_swigregister
BytePtrArray_swigregister(BytePtrArray)

def BytePtrArray_frompointer(*args):
  return _yael.BytePtrArray_frompointer(*args)
BytePtrArray_frompointer = _yael.BytePtrArray_frompointer

BytePtrArray.aptr=BytePtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(BytePtrArray,ptr))

fvec=FloatArray
dvec=DoubleArray
ivec=IntArray


def knn_full(*args):
  return _yael.knn_full(*args)
knn_full = _yael.knn_full

def knn_full_thread(*args):
  return _yael.knn_full_thread(*args)
knn_full_thread = _yael.knn_full_thread

def nn(*args):
  return _yael.nn(*args)
nn = _yael.nn

def nn_thread(*args):
  return _yael.nn_thread(*args)
nn_thread = _yael.nn_thread

def knn(*args):
  return _yael.knn(*args)
knn = _yael.knn

def knn_thread(*args):
  return _yael.knn_thread(*args)
knn_thread = _yael.knn_thread

def knn_reorder_shortlist(*args):
  return _yael.knn_reorder_shortlist(*args)
knn_reorder_shortlist = _yael.knn_reorder_shortlist

def knn_recompute_exact_dists(*args):
  return _yael.knn_recompute_exact_dists(*args)
knn_recompute_exact_dists = _yael.knn_recompute_exact_dists

def compute_cross_distances(*args):
  return _yael.compute_cross_distances(*args)
compute_cross_distances = _yael.compute_cross_distances

def compute_cross_distances_nonpacked(*args):
  return _yael.compute_cross_distances_nonpacked(*args)
compute_cross_distances_nonpacked = _yael.compute_cross_distances_nonpacked

def compute_cross_distances_thread(*args):
  return _yael.compute_cross_distances_thread(*args)
compute_cross_distances_thread = _yael.compute_cross_distances_thread

def compute_cross_distances_alt(*args):
  return _yael.compute_cross_distances_alt(*args)
compute_cross_distances_alt = _yael.compute_cross_distances_alt

def compute_cross_distances_alt_nonpacked(*args):
  return _yael.compute_cross_distances_alt_nonpacked(*args)
compute_cross_distances_alt_nonpacked = _yael.compute_cross_distances_alt_nonpacked

def compute_cross_distances_alt_thread(*args):
  return _yael.compute_cross_distances_alt_thread(*args)
compute_cross_distances_alt_thread = _yael.compute_cross_distances_alt_thread

def compute_distances_1(*args):
  return _yael.compute_distances_1(*args)
compute_distances_1 = _yael.compute_distances_1

def compute_distances_1_nonpacked(*args):
  return _yael.compute_distances_1_nonpacked(*args)
compute_distances_1_nonpacked = _yael.compute_distances_1_nonpacked

def compute_distances_1_thread(*args):
  return _yael.compute_distances_1_thread(*args)
compute_distances_1_thread = _yael.compute_distances_1_thread

def compute_distances_1_nonpacked_thread(*args):
  return _yael.compute_distances_1_nonpacked_thread(*args)
compute_distances_1_nonpacked_thread = _yael.compute_distances_1_nonpacked_thread
KMEANS_QUIET = _yael.KMEANS_QUIET
KMEANS_INIT_BERKELEY = _yael.KMEANS_INIT_BERKELEY
KMEANS_NORMALIZE_CENTS = _yael.KMEANS_NORMALIZE_CENTS
KMEANS_INIT_RANDOM = _yael.KMEANS_INIT_RANDOM
KMEANS_INIT_USER = _yael.KMEANS_INIT_USER
KMEANS_L1 = _yael.KMEANS_L1
KMEANS_CHI2 = _yael.KMEANS_CHI2

def kmeans(*args):
  return _yael.kmeans(*args)
kmeans = _yael.kmeans

def clustering_kmeans(*args):
  return _yael.clustering_kmeans(*args)
clustering_kmeans = _yael.clustering_kmeans

def clustering_kmeans_assign(*args):
  return _yael.clustering_kmeans_assign(*args)
clustering_kmeans_assign = _yael.clustering_kmeans_assign

def clustering_kmeans_assign_with_score(*args):
  return _yael.clustering_kmeans_assign_with_score(*args)
clustering_kmeans_assign_with_score = _yael.clustering_kmeans_assign_with_score
class hkm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hkm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hkm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nlevel"] = _yael.hkm_t_nlevel_set
    __swig_getmethods__["nlevel"] = _yael.hkm_t_nlevel_get
    if _newclass:nlevel = _swig_property(_yael.hkm_t_nlevel_get, _yael.hkm_t_nlevel_set)
    __swig_setmethods__["bf"] = _yael.hkm_t_bf_set
    __swig_getmethods__["bf"] = _yael.hkm_t_bf_get
    if _newclass:bf = _swig_property(_yael.hkm_t_bf_get, _yael.hkm_t_bf_set)
    __swig_setmethods__["k"] = _yael.hkm_t_k_set
    __swig_getmethods__["k"] = _yael.hkm_t_k_get
    if _newclass:k = _swig_property(_yael.hkm_t_k_get, _yael.hkm_t_k_set)
    __swig_setmethods__["d"] = _yael.hkm_t_d_set
    __swig_getmethods__["d"] = _yael.hkm_t_d_get
    if _newclass:d = _swig_property(_yael.hkm_t_d_get, _yael.hkm_t_d_set)
    __swig_setmethods__["centroids"] = _yael.hkm_t_centroids_set
    __swig_getmethods__["centroids"] = _yael.hkm_t_centroids_get
    if _newclass:centroids = _swig_property(_yael.hkm_t_centroids_get, _yael.hkm_t_centroids_set)
    def __init__(self): 
        this = _yael.new_hkm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_hkm_t
    __del__ = lambda self : None;
hkm_t_swigregister = _yael.hkm_t_swigregister
hkm_t_swigregister(hkm_t)


def hkm_learn(*args):
  return _yael.hkm_learn(*args)
hkm_learn = _yael.hkm_learn

def hkm_delete(*args):
  return _yael.hkm_delete(*args)
hkm_delete = _yael.hkm_delete

def hkm_quantize(*args):
  return _yael.hkm_quantize(*args)
hkm_quantize = _yael.hkm_quantize

def hkm_write(*args):
  return _yael.hkm_write(*args)
hkm_write = _yael.hkm_write

def hkm_read(*args):
  return _yael.hkm_read(*args)
hkm_read = _yael.hkm_read

def hkm_get_centroids(*args):
  return _yael.hkm_get_centroids(*args)
hkm_get_centroids = _yael.hkm_get_centroids

def fvec_k_max(*args):
  return _yael.fvec_k_max(*args)
fvec_k_max = _yael.fvec_k_max

def fvec_k_min(*args):
  return _yael.fvec_k_min(*args)
fvec_k_min = _yael.fvec_k_min

def fvec_ranks_of(*args):
  return _yael.fvec_ranks_of(*args)
fvec_ranks_of = _yael.fvec_ranks_of

def fvec_ranks_inc_of(*args):
  return _yael.fvec_ranks_inc_of(*args)
fvec_ranks_inc_of = _yael.fvec_ranks_inc_of

def find_labels(*args):
  return _yael.find_labels(*args)
find_labels = _yael.find_labels

def fvec_min(*args):
  return _yael.fvec_min(*args)
fvec_min = _yael.fvec_min

def ivec_min(*args):
  return _yael.ivec_min(*args)
ivec_min = _yael.ivec_min

def fvec_max(*args):
  return _yael.fvec_max(*args)
fvec_max = _yael.fvec_max

def ivec_max(*args):
  return _yael.ivec_max(*args)
ivec_max = _yael.ivec_max

def fvec_arg_min(*args):
  return _yael.fvec_arg_min(*args)
fvec_arg_min = _yael.fvec_arg_min

def fvec_arg_max(*args):
  return _yael.fvec_arg_max(*args)
fvec_arg_max = _yael.fvec_arg_max

def fvec_median(*args):
  return _yael.fvec_median(*args)
fvec_median = _yael.fvec_median

def fvec_median_const(*args):
  return _yael.fvec_median_const(*args)
fvec_median_const = _yael.fvec_median_const

def fvec_quantile(*args):
  return _yael.fvec_quantile(*args)
fvec_quantile = _yael.fvec_quantile

def ivec_sort(*args):
  return _yael.ivec_sort(*args)
ivec_sort = _yael.ivec_sort

def ivec_sort_index(*args):
  return _yael.ivec_sort_index(*args)
ivec_sort_index = _yael.ivec_sort_index

def ivec_invert_perm(*args):
  return _yael.ivec_invert_perm(*args)
ivec_invert_perm = _yael.ivec_invert_perm

def fvec_sort(*args):
  return _yael.fvec_sort(*args)
fvec_sort = _yael.fvec_sort

def fvecs_sort(*args):
  return _yael.fvecs_sort(*args)
fvecs_sort = _yael.fvecs_sort

def fvec_sort_index(*args):
  return _yael.fvec_sort_index(*args)
fvec_sort_index = _yael.fvec_sort_index

def ivec_sort_by_permutation(*args):
  return _yael.ivec_sort_by_permutation(*args)
ivec_sort_by_permutation = _yael.ivec_sort_by_permutation

def fvec_sort_by_permutation(*args):
  return _yael.fvec_sort_by_permutation(*args)
fvec_sort_by_permutation = _yael.fvec_sort_by_permutation

def ivec_sorted_count_occurrences(*args):
  return _yael.ivec_sorted_count_occurrences(*args)
ivec_sorted_count_occurrences = _yael.ivec_sorted_count_occurrences

def ivec_sorted_find(*args):
  return _yael.ivec_sorted_find(*args)
ivec_sorted_find = _yael.ivec_sorted_find

def ivec_sorted_count_unique(*args):
  return _yael.ivec_sorted_count_unique(*args)
ivec_sorted_count_unique = _yael.ivec_sorted_count_unique

def ivec_sorted_count_occurrences_multiple(*args):
  return _yael.ivec_sorted_count_occurrences_multiple(*args)
ivec_sorted_count_occurrences_multiple = _yael.ivec_sorted_count_occurrences_multiple

def merge_ordered_sets(*args):
  return _yael.merge_ordered_sets(*args)
merge_ordered_sets = _yael.merge_ordered_sets

def compress_labels_by_disratio(*args):
  return _yael.compress_labels_by_disratio(*args)
compress_labels_by_disratio = _yael.compress_labels_by_disratio
class fbinheap_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fbinheap_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fbinheap_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _yael.fbinheap_s_val_set
    __swig_getmethods__["val"] = _yael.fbinheap_s_val_get
    if _newclass:val = _swig_property(_yael.fbinheap_s_val_get, _yael.fbinheap_s_val_set)
    __swig_setmethods__["label"] = _yael.fbinheap_s_label_set
    __swig_getmethods__["label"] = _yael.fbinheap_s_label_get
    if _newclass:label = _swig_property(_yael.fbinheap_s_label_get, _yael.fbinheap_s_label_set)
    __swig_setmethods__["k"] = _yael.fbinheap_s_k_set
    __swig_getmethods__["k"] = _yael.fbinheap_s_k_get
    if _newclass:k = _swig_property(_yael.fbinheap_s_k_get, _yael.fbinheap_s_k_set)
    __swig_setmethods__["maxk"] = _yael.fbinheap_s_maxk_set
    __swig_getmethods__["maxk"] = _yael.fbinheap_s_maxk_get
    if _newclass:maxk = _swig_property(_yael.fbinheap_s_maxk_get, _yael.fbinheap_s_maxk_set)
    def __init__(self): 
        this = _yael.new_fbinheap_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_fbinheap_s
    __del__ = lambda self : None;
fbinheap_s_swigregister = _yael.fbinheap_s_swigregister
fbinheap_s_swigregister(fbinheap_s)


def fbinheap_new(*args):
  return _yael.fbinheap_new(*args)
fbinheap_new = _yael.fbinheap_new

def fbinheap_sizeof(*args):
  return _yael.fbinheap_sizeof(*args)
fbinheap_sizeof = _yael.fbinheap_sizeof

def fbinheap_init(*args):
  return _yael.fbinheap_init(*args)
fbinheap_init = _yael.fbinheap_init

def fbinheap_delete(*args):
  return _yael.fbinheap_delete(*args)
fbinheap_delete = _yael.fbinheap_delete

def fbinheap_reset(*args):
  return _yael.fbinheap_reset(*args)
fbinheap_reset = _yael.fbinheap_reset

def fbinheap_add(*args):
  return _yael.fbinheap_add(*args)
fbinheap_add = _yael.fbinheap_add

def fbinheap_pop(*args):
  return _yael.fbinheap_pop(*args)
fbinheap_pop = _yael.fbinheap_pop

def fbinheap_addn(*args):
  return _yael.fbinheap_addn(*args)
fbinheap_addn = _yael.fbinheap_addn

def fbinheap_addn_label_range(*args):
  return _yael.fbinheap_addn_label_range(*args)
fbinheap_addn_label_range = _yael.fbinheap_addn_label_range

def fbinheap_sort_labels(*args):
  return _yael.fbinheap_sort_labels(*args)
fbinheap_sort_labels = _yael.fbinheap_sort_labels

def fbinheap_sort_values(*args):
  return _yael.fbinheap_sort_values(*args)
fbinheap_sort_values = _yael.fbinheap_sort_values

def fbinheap_sort(*args):
  return _yael.fbinheap_sort(*args)
fbinheap_sort = _yael.fbinheap_sort

def fbinheap_sort_per_labels(*args):
  return _yael.fbinheap_sort_per_labels(*args)
fbinheap_sort_per_labels = _yael.fbinheap_sort_per_labels

def fbinheap_display(*args):
  return _yael.fbinheap_display(*args)
fbinheap_display = _yael.fbinheap_display
class abinheap_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, abinheap_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, abinheap_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _yael.abinheap_s_val_set
    __swig_getmethods__["val"] = _yael.abinheap_s_val_get
    if _newclass:val = _swig_property(_yael.abinheap_s_val_get, _yael.abinheap_s_val_set)
    __swig_setmethods__["label"] = _yael.abinheap_s_label_set
    __swig_getmethods__["label"] = _yael.abinheap_s_label_get
    if _newclass:label = _swig_property(_yael.abinheap_s_label_get, _yael.abinheap_s_label_set)
    __swig_setmethods__["k"] = _yael.abinheap_s_k_set
    __swig_getmethods__["k"] = _yael.abinheap_s_k_get
    if _newclass:k = _swig_property(_yael.abinheap_s_k_get, _yael.abinheap_s_k_set)
    __swig_setmethods__["maxk"] = _yael.abinheap_s_maxk_set
    __swig_getmethods__["maxk"] = _yael.abinheap_s_maxk_get
    if _newclass:maxk = _swig_property(_yael.abinheap_s_maxk_get, _yael.abinheap_s_maxk_set)
    __swig_setmethods__["labelsize"] = _yael.abinheap_s_labelsize_set
    __swig_getmethods__["labelsize"] = _yael.abinheap_s_labelsize_get
    if _newclass:labelsize = _swig_property(_yael.abinheap_s_labelsize_get, _yael.abinheap_s_labelsize_set)
    def __init__(self): 
        this = _yael.new_abinheap_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_abinheap_s
    __del__ = lambda self : None;
abinheap_s_swigregister = _yael.abinheap_s_swigregister
abinheap_s_swigregister(abinheap_s)


def abinheap_new(*args):
  return _yael.abinheap_new(*args)
abinheap_new = _yael.abinheap_new

def abinheap_sizeof(*args):
  return _yael.abinheap_sizeof(*args)
abinheap_sizeof = _yael.abinheap_sizeof

def abinheap_init(*args):
  return _yael.abinheap_init(*args)
abinheap_init = _yael.abinheap_init

def abinheap_delete(*args):
  return _yael.abinheap_delete(*args)
abinheap_delete = _yael.abinheap_delete

def abinheap_reset(*args):
  return _yael.abinheap_reset(*args)
abinheap_reset = _yael.abinheap_reset

def abinheap_add(*args):
  return _yael.abinheap_add(*args)
abinheap_add = _yael.abinheap_add

def abinheap_pop(*args):
  return _yael.abinheap_pop(*args)
abinheap_pop = _yael.abinheap_pop

def abinheap_sort(*args):
  return _yael.abinheap_sort(*args)
abinheap_sort = _yael.abinheap_sort

def abinheap_get_label(*args):
  return _yael.abinheap_get_label(*args)
abinheap_get_label = _yael.abinheap_get_label

def gaussrand():
  return _yael.gaussrand()
gaussrand = _yael.gaussrand

def fvec_new(*args):
  return _yael.fvec_new(*args)
fvec_new = _yael.fvec_new

def ivec_new(*args):
  return _yael.ivec_new(*args)
ivec_new = _yael.ivec_new

def bvec_new(*args):
  return _yael.bvec_new(*args)
bvec_new = _yael.bvec_new

def lvec_new(*args):
  return _yael.lvec_new(*args)
lvec_new = _yael.lvec_new

def dvec_new(*args):
  return _yael.dvec_new(*args)
dvec_new = _yael.dvec_new

def fvec_new_0(*args):
  return _yael.fvec_new_0(*args)
fvec_new_0 = _yael.fvec_new_0

def dvec_new_0(*args):
  return _yael.dvec_new_0(*args)
dvec_new_0 = _yael.dvec_new_0

def ivec_new_0(*args):
  return _yael.ivec_new_0(*args)
ivec_new_0 = _yael.ivec_new_0

def bvec_new_0(*args):
  return _yael.bvec_new_0(*args)
bvec_new_0 = _yael.bvec_new_0

def lvec_new_0(*args):
  return _yael.lvec_new_0(*args)
lvec_new_0 = _yael.lvec_new_0

def fvec_new_nan(*args):
  return _yael.fvec_new_nan(*args)
fvec_new_nan = _yael.fvec_new_nan

def fvec_new_set(*args):
  return _yael.fvec_new_set(*args)
fvec_new_set = _yael.fvec_new_set

def ivec_new_set(*args):
  return _yael.ivec_new_set(*args)
ivec_new_set = _yael.ivec_new_set

def fvec_new_rand(*args):
  return _yael.fvec_new_rand(*args)
fvec_new_rand = _yael.fvec_new_rand

def fvec_new_randn(*args):
  return _yael.fvec_new_randn(*args)
fvec_new_randn = _yael.fvec_new_randn

def fvec_randn_r(*args):
  return _yael.fvec_randn_r(*args)
fvec_randn_r = _yael.fvec_randn_r

def fvec_new_rand_r(*args):
  return _yael.fvec_new_rand_r(*args)
fvec_new_rand_r = _yael.fvec_new_rand_r

def fvec_new_randn_r(*args):
  return _yael.fvec_new_randn_r(*args)
fvec_new_randn_r = _yael.fvec_new_randn_r

def ivec_new_range(*args):
  return _yael.ivec_new_range(*args)
ivec_new_range = _yael.ivec_new_range

def ivec_new_cpy(*args):
  return _yael.ivec_new_cpy(*args)
ivec_new_cpy = _yael.ivec_new_cpy

def fvec_new_cpy(*args):
  return _yael.fvec_new_cpy(*args)
fvec_new_cpy = _yael.fvec_new_cpy

def ivec_new_random_perm(*args):
  return _yael.ivec_new_random_perm(*args)
ivec_new_random_perm = _yael.ivec_new_random_perm

def ivec_new_random_idx(*args):
  return _yael.ivec_new_random_idx(*args)
ivec_new_random_idx = _yael.ivec_new_random_idx

def ivec_new_random_perm_r(*args):
  return _yael.ivec_new_random_perm_r(*args)
ivec_new_random_perm_r = _yael.ivec_new_random_perm_r

def ivec_new_random_idx_r(*args):
  return _yael.ivec_new_random_idx_r(*args)
ivec_new_random_idx_r = _yael.ivec_new_random_idx_r

def fvec_resize(*args):
  return _yael.fvec_resize(*args)
fvec_resize = _yael.fvec_resize

def ivec_resize(*args):
  return _yael.ivec_resize(*args)
ivec_resize = _yael.ivec_resize

def ivec_new_histogram(*args):
  return _yael.ivec_new_histogram(*args)
ivec_new_histogram = _yael.ivec_new_histogram

def ivec_new_histogram_clip(*args):
  return _yael.ivec_new_histogram_clip(*args)
ivec_new_histogram_clip = _yael.ivec_new_histogram_clip

def fvec_new_histogram_clip(*args):
  return _yael.fvec_new_histogram_clip(*args)
fvec_new_histogram_clip = _yael.fvec_new_histogram_clip

def ivec_hash(*args):
  return _yael.ivec_hash(*args)
ivec_hash = _yael.ivec_hash

def ivec_replace(*args):
  return _yael.ivec_replace(*args)
ivec_replace = _yael.ivec_replace

def ivec_count_occurrences(*args):
  return _yael.ivec_count_occurrences(*args)
ivec_count_occurrences = _yael.ivec_count_occurrences

def fvec_count_occurrences(*args):
  return _yael.fvec_count_occurrences(*args)
fvec_count_occurrences = _yael.fvec_count_occurrences

def fvec_count_lt(*args):
  return _yael.fvec_count_lt(*args)
fvec_count_lt = _yael.fvec_count_lt

def ivec_count_lt(*args):
  return _yael.ivec_count_lt(*args)
ivec_count_lt = _yael.ivec_count_lt

def fvec_count_gt(*args):
  return _yael.fvec_count_gt(*args)
fvec_count_gt = _yael.fvec_count_gt

def ivec_count_gt(*args):
  return _yael.ivec_count_gt(*args)
ivec_count_gt = _yael.ivec_count_gt

def fvec_count_inrange(*args):
  return _yael.fvec_count_inrange(*args)
fvec_count_inrange = _yael.fvec_count_inrange

def ivec_count_inrange(*args):
  return _yael.ivec_count_inrange(*args)
ivec_count_inrange = _yael.ivec_count_inrange

def fvec_count_nan(*args):
  return _yael.fvec_count_nan(*args)
fvec_count_nan = _yael.fvec_count_nan

def fvec_count_nonfinite(*args):
  return _yael.fvec_count_nonfinite(*args)
fvec_count_nonfinite = _yael.fvec_count_nonfinite

def fvec_count_0(*args):
  return _yael.fvec_count_0(*args)
fvec_count_0 = _yael.fvec_count_0

def fvecs_fsize(*args):
  return _yael.fvecs_fsize(*args)
fvecs_fsize = _yael.fvecs_fsize

def ivecs_fsize(*args):
  return _yael.ivecs_fsize(*args)
ivecs_fsize = _yael.ivecs_fsize

def bvecs_fsize(*args):
  return _yael.bvecs_fsize(*args)
bvecs_fsize = _yael.bvecs_fsize

def lvecs_fsize(*args):
  return _yael.lvecs_fsize(*args)
lvecs_fsize = _yael.lvecs_fsize

def ivec_fwrite(*args):
  return _yael.ivec_fwrite(*args)
ivec_fwrite = _yael.ivec_fwrite

def fvec_fwrite(*args):
  return _yael.fvec_fwrite(*args)
fvec_fwrite = _yael.fvec_fwrite

def ivec_fwrite_raw(*args):
  return _yael.ivec_fwrite_raw(*args)
ivec_fwrite_raw = _yael.ivec_fwrite_raw

def fvec_fwrite_raw(*args):
  return _yael.fvec_fwrite_raw(*args)
fvec_fwrite_raw = _yael.fvec_fwrite_raw

def bvec_fwrite_raw(*args):
  return _yael.bvec_fwrite_raw(*args)
bvec_fwrite_raw = _yael.bvec_fwrite_raw

def ivec_write_raw(*args):
  return _yael.ivec_write_raw(*args)
ivec_write_raw = _yael.ivec_write_raw

def fvec_write_raw(*args):
  return _yael.fvec_write_raw(*args)
fvec_write_raw = _yael.fvec_write_raw

def bvec_write_raw(*args):
  return _yael.bvec_write_raw(*args)
bvec_write_raw = _yael.bvec_write_raw

def ivecs_fwrite(*args):
  return _yael.ivecs_fwrite(*args)
ivecs_fwrite = _yael.ivecs_fwrite

def fvecs_fwrite(*args):
  return _yael.fvecs_fwrite(*args)
fvecs_fwrite = _yael.fvecs_fwrite

def ivecs_write(*args):
  return _yael.ivecs_write(*args)
ivecs_write = _yael.ivecs_write

def ivecs_write_txt(*args):
  return _yael.ivecs_write_txt(*args)
ivecs_write_txt = _yael.ivecs_write_txt

def fvecs_write(*args):
  return _yael.fvecs_write(*args)
fvecs_write = _yael.fvecs_write

def fvecs_write_txt(*args):
  return _yael.fvecs_write_txt(*args)
fvecs_write_txt = _yael.fvecs_write_txt

def bvecs_write(*args):
  return _yael.bvecs_write(*args)
bvecs_write = _yael.bvecs_write

def fvecs_new_read(*args):
  return _yael.fvecs_new_read(*args)
fvecs_new_read = _yael.fvecs_new_read

def fvecs_new_fread_max(*args):
  return _yael.fvecs_new_fread_max(*args)
fvecs_new_fread_max = _yael.fvecs_new_fread_max

def fvecs_new_mmap(*args):
  return _yael.fvecs_new_mmap(*args)
fvecs_new_mmap = _yael.fvecs_new_mmap

def ivecs_new_mmap(*args):
  return _yael.ivecs_new_mmap(*args)
ivecs_new_mmap = _yael.ivecs_new_mmap

def bvecs_new_read(*args):
  return _yael.bvecs_new_read(*args)
bvecs_new_read = _yael.bvecs_new_read

def lvecs_new_read(*args):
  return _yael.lvecs_new_read(*args)
lvecs_new_read = _yael.lvecs_new_read

def b2fvecs_new_read(*args):
  return _yael.b2fvecs_new_read(*args)
b2fvecs_new_read = _yael.b2fvecs_new_read

def fvecs_new_read_sparse(*args):
  return _yael.fvecs_new_read_sparse(*args)
fvecs_new_read_sparse = _yael.fvecs_new_read_sparse

def bvecs_new_from_siftgeo(*args):
  return _yael.bvecs_new_from_siftgeo(*args)
bvecs_new_from_siftgeo = _yael.bvecs_new_from_siftgeo

def fvecs_read(*args):
  return _yael.fvecs_read(*args)
fvecs_read = _yael.fvecs_read

def b2fvecs_read(*args):
  return _yael.b2fvecs_read(*args)
b2fvecs_read = _yael.b2fvecs_read

def fvecs_read_txt(*args):
  return _yael.fvecs_read_txt(*args)
fvecs_read_txt = _yael.fvecs_read_txt

def fvec_read(*args):
  return _yael.fvec_read(*args)
fvec_read = _yael.fvec_read

def fvec_fread(*args):
  return _yael.fvec_fread(*args)
fvec_fread = _yael.fvec_fread

def fvec_fread_raw(*args):
  return _yael.fvec_fread_raw(*args)
fvec_fread_raw = _yael.fvec_fread_raw

def ivec_fread_raw(*args):
  return _yael.ivec_fread_raw(*args)
ivec_fread_raw = _yael.ivec_fread_raw

def bvec_fread_raw(*args):
  return _yael.bvec_fread_raw(*args)
bvec_fread_raw = _yael.bvec_fread_raw

def fvec_new_fread_raw(*args):
  return _yael.fvec_new_fread_raw(*args)
fvec_new_fread_raw = _yael.fvec_new_fread_raw

def ivec_new_fread_raw(*args):
  return _yael.ivec_new_fread_raw(*args)
ivec_new_fread_raw = _yael.ivec_new_fread_raw

def bvec_new_fread_raw(*args):
  return _yael.bvec_new_fread_raw(*args)
bvec_new_fread_raw = _yael.bvec_new_fread_raw

def fvec_new_read_raw(*args):
  return _yael.fvec_new_read_raw(*args)
fvec_new_read_raw = _yael.fvec_new_read_raw

def ivec_new_read_raw(*args):
  return _yael.ivec_new_read_raw(*args)
ivec_new_read_raw = _yael.ivec_new_read_raw

def bvec_new_read_raw(*args):
  return _yael.bvec_new_read_raw(*args)
bvec_new_read_raw = _yael.bvec_new_read_raw

def fvecs_fread(*args):
  return _yael.fvecs_fread(*args)
fvecs_fread = _yael.fvecs_fread

def ivecs_fread(*args):
  return _yael.ivecs_fread(*args)
ivecs_fread = _yael.ivecs_fread

def bvecs_fread(*args):
  return _yael.bvecs_fread(*args)
bvecs_fread = _yael.bvecs_fread

def lvecs_fread(*args):
  return _yael.lvecs_fread(*args)
lvecs_fread = _yael.lvecs_fread

def b2fvecs_fread(*args):
  return _yael.b2fvecs_fread(*args)
b2fvecs_fread = _yael.b2fvecs_fread

def ivec_new_read(*args):
  return _yael.ivec_new_read(*args)
ivec_new_read = _yael.ivec_new_read

def ivec_fread(*args):
  return _yael.ivec_fread(*args)
ivec_fread = _yael.ivec_fread

def bvec_fread(*args):
  return _yael.bvec_fread(*args)
bvec_fread = _yael.bvec_fread

def b2fvec_fread(*args):
  return _yael.b2fvec_fread(*args)
b2fvec_fread = _yael.b2fvec_fread

def lvec_fread(*args):
  return _yael.lvec_fread(*args)
lvec_fread = _yael.lvec_fread

def ivecs_new_read(*args):
  return _yael.ivecs_new_read(*args)
ivecs_new_read = _yael.ivecs_new_read

def ivecs_new_fread_max(*args):
  return _yael.ivecs_new_fread_max(*args)
ivecs_new_fread_max = _yael.ivecs_new_fread_max

def fvec_print(*args):
  return _yael.fvec_print(*args)
fvec_print = _yael.fvec_print

def fvec_fprintf(*args):
  return _yael.fvec_fprintf(*args)
fvec_fprintf = _yael.fvec_fprintf

def ivec_print(*args):
  return _yael.ivec_print(*args)
ivec_print = _yael.ivec_print

def ivec_fprintf(*args):
  return _yael.ivec_fprintf(*args)
ivec_fprintf = _yael.ivec_fprintf

def ivec_index(*args):
  return _yael.ivec_index(*args)
ivec_index = _yael.ivec_index

def ivec2fvec(*args):
  return _yael.ivec2fvec(*args)
ivec2fvec = _yael.ivec2fvec

def bvec2fvec(*args):
  return _yael.bvec2fvec(*args)
bvec2fvec = _yael.bvec2fvec

def bvectofvec(*args):
  return _yael.bvectofvec(*args)
bvectofvec = _yael.bvectofvec

def fvectodvec(*args):
  return _yael.fvectodvec(*args)
fvectodvec = _yael.fvectodvec

def fvec_0(*args):
  return _yael.fvec_0(*args)
fvec_0 = _yael.fvec_0

def ivec_0(*args):
  return _yael.ivec_0(*args)
ivec_0 = _yael.ivec_0

def fvec_nan(*args):
  return _yael.fvec_nan(*args)
fvec_nan = _yael.fvec_nan

def fvec_rand(*args):
  return _yael.fvec_rand(*args)
fvec_rand = _yael.fvec_rand

def fvec_randn(*args):
  return _yael.fvec_randn(*args)
fvec_randn = _yael.fvec_randn

def fvec_all_0(*args):
  return _yael.fvec_all_0(*args)
fvec_all_0 = _yael.fvec_all_0

def ivec_all_0(*args):
  return _yael.ivec_all_0(*args)
ivec_all_0 = _yael.ivec_all_0

def fvec_all_ge0(*args):
  return _yael.fvec_all_ge0(*args)
fvec_all_ge0 = _yael.fvec_all_ge0

def ivec_all_ge0(*args):
  return _yael.ivec_all_ge0(*args)
ivec_all_ge0 = _yael.ivec_all_ge0

def fvec_all_finite(*args):
  return _yael.fvec_all_finite(*args)
fvec_all_finite = _yael.fvec_all_finite

def fvec_set(*args):
  return _yael.fvec_set(*args)
fvec_set = _yael.fvec_set

def ivec_set(*args):
  return _yael.ivec_set(*args)
ivec_set = _yael.ivec_set

def ivec_cpy(*args):
  return _yael.ivec_cpy(*args)
ivec_cpy = _yael.ivec_cpy

def fvec_cpy(*args):
  return _yael.fvec_cpy(*args)
fvec_cpy = _yael.fvec_cpy

def bvec_cpy(*args):
  return _yael.bvec_cpy(*args)
bvec_cpy = _yael.bvec_cpy

def fvec_incr(*args):
  return _yael.fvec_incr(*args)
fvec_incr = _yael.fvec_incr

def fvec_decr(*args):
  return _yael.fvec_decr(*args)
fvec_decr = _yael.fvec_decr

def ivec_incr(*args):
  return _yael.ivec_incr(*args)
ivec_incr = _yael.ivec_incr

def ivec_decr(*args):
  return _yael.ivec_decr(*args)
ivec_decr = _yael.ivec_decr

def fvec_mul_by(*args):
  return _yael.fvec_mul_by(*args)
fvec_mul_by = _yael.fvec_mul_by

def fvec_div_by(*args):
  return _yael.fvec_div_by(*args)
fvec_div_by = _yael.fvec_div_by

def fvec_rdiv_by(*args):
  return _yael.fvec_rdiv_by(*args)
fvec_rdiv_by = _yael.fvec_rdiv_by

def fvec_add(*args):
  return _yael.fvec_add(*args)
fvec_add = _yael.fvec_add

def fvec_sub(*args):
  return _yael.fvec_sub(*args)
fvec_sub = _yael.fvec_sub

def fvec_rev_sub(*args):
  return _yael.fvec_rev_sub(*args)
fvec_rev_sub = _yael.fvec_rev_sub

def fvec_add_mul(*args):
  return _yael.fvec_add_mul(*args)
fvec_add_mul = _yael.fvec_add_mul

def fvec_mul(*args):
  return _yael.fvec_mul(*args)
fvec_mul = _yael.fvec_mul

def fvec_div(*args):
  return _yael.fvec_div(*args)
fvec_div = _yael.fvec_div

def fvec_normalize(*args):
  return _yael.fvec_normalize(*args)
fvec_normalize = _yael.fvec_normalize

def fvecs_normalize(*args):
  return _yael.fvecs_normalize(*args)
fvecs_normalize = _yael.fvecs_normalize

def fvec_round(*args):
  return _yael.fvec_round(*args)
fvec_round = _yael.fvec_round

def fvec_sqrt(*args):
  return _yael.fvec_sqrt(*args)
fvec_sqrt = _yael.fvec_sqrt

def fvec_sqr(*args):
  return _yael.fvec_sqr(*args)
fvec_sqr = _yael.fvec_sqr

def fvec_exp(*args):
  return _yael.fvec_exp(*args)
fvec_exp = _yael.fvec_exp

def fvec_log(*args):
  return _yael.fvec_log(*args)
fvec_log = _yael.fvec_log

def fvec_neg(*args):
  return _yael.fvec_neg(*args)
fvec_neg = _yael.fvec_neg

def fvec_ssqrt(*args):
  return _yael.fvec_ssqrt(*args)
fvec_ssqrt = _yael.fvec_ssqrt

def fvec_spow(*args):
  return _yael.fvec_spow(*args)
fvec_spow = _yael.fvec_spow

def fvec_normalize_2stage(*args):
  return _yael.fvec_normalize_2stage(*args)
fvec_normalize_2stage = _yael.fvec_normalize_2stage

def ivec_add(*args):
  return _yael.ivec_add(*args)
ivec_add = _yael.ivec_add

def ivec_sub(*args):
  return _yael.ivec_sub(*args)
ivec_sub = _yael.ivec_sub

def ivec_mul_by(*args):
  return _yael.ivec_mul_by(*args)
ivec_mul_by = _yael.ivec_mul_by

def ivec_mod_by(*args):
  return _yael.ivec_mod_by(*args)
ivec_mod_by = _yael.ivec_mod_by

def ivec_add_scalar(*args):
  return _yael.ivec_add_scalar(*args)
ivec_add_scalar = _yael.ivec_add_scalar

def fvec_add_scalar(*args):
  return _yael.fvec_add_scalar(*args)
fvec_add_scalar = _yael.fvec_add_scalar

def fvec_purge_nans(*args):
  return _yael.fvec_purge_nans(*args)
fvec_purge_nans = _yael.fvec_purge_nans

def fvec_purge_nonfinite(*args):
  return _yael.fvec_purge_nonfinite(*args)
fvec_purge_nonfinite = _yael.fvec_purge_nonfinite

def fvec_shrink_nonfinite(*args):
  return _yael.fvec_shrink_nonfinite(*args)
fvec_shrink_nonfinite = _yael.fvec_shrink_nonfinite

def fvec_index_nonfinite(*args):
  return _yael.fvec_index_nonfinite(*args)
fvec_index_nonfinite = _yael.fvec_index_nonfinite

def fvec_revert(*args):
  return _yael.fvec_revert(*args)
fvec_revert = _yael.fvec_revert

def fvec_swap(*args):
  return _yael.fvec_swap(*args)
fvec_swap = _yael.fvec_swap

def fvec_sum(*args):
  return _yael.fvec_sum(*args)
fvec_sum = _yael.fvec_sum

def ivec_sum(*args):
  return _yael.ivec_sum(*args)
ivec_sum = _yael.ivec_sum

def fvec_cumsum(*args):
  return _yael.fvec_cumsum(*args)
fvec_cumsum = _yael.fvec_cumsum

def ivec_cumsum(*args):
  return _yael.ivec_cumsum(*args)
ivec_cumsum = _yael.ivec_cumsum

def fvec_cumdiff(*args):
  return _yael.fvec_cumdiff(*args)
fvec_cumdiff = _yael.fvec_cumdiff

def ivec_cumdiff(*args):
  return _yael.ivec_cumdiff(*args)
ivec_cumdiff = _yael.ivec_cumdiff

def fvec_product(*args):
  return _yael.fvec_product(*args)
fvec_product = _yael.fvec_product

def ivec_product(*args):
  return _yael.ivec_product(*args)
ivec_product = _yael.ivec_product

def fvec_sum_sqr(*args):
  return _yael.fvec_sum_sqr(*args)
fvec_sum_sqr = _yael.fvec_sum_sqr

def ivec_sum_sqr(*args):
  return _yael.ivec_sum_sqr(*args)
ivec_sum_sqr = _yael.ivec_sum_sqr

def fvec_mean(*args):
  return _yael.fvec_mean(*args)
fvec_mean = _yael.fvec_mean

def ivec_mean(*args):
  return _yael.ivec_mean(*args)
ivec_mean = _yael.ivec_mean

def fvec_norm(*args):
  return _yael.fvec_norm(*args)
fvec_norm = _yael.fvec_norm

def fvec_norm2sqr(*args):
  return _yael.fvec_norm2sqr(*args)
fvec_norm2sqr = _yael.fvec_norm2sqr

def fvec_nz(*args):
  return _yael.fvec_nz(*args)
fvec_nz = _yael.fvec_nz

def ivec_nz(*args):
  return _yael.ivec_nz(*args)
ivec_nz = _yael.ivec_nz

def fvec_find(*args):
  return _yael.fvec_find(*args)
fvec_find = _yael.fvec_find

def ivec_find(*args):
  return _yael.ivec_find(*args)
ivec_find = _yael.ivec_find

def ivec_shuffle(*args):
  return _yael.ivec_shuffle(*args)
ivec_shuffle = _yael.ivec_shuffle

def fvec_entropy(*args):
  return _yael.fvec_entropy(*args)
fvec_entropy = _yael.fvec_entropy

def binary_entropy(*args):
  return _yael.binary_entropy(*args)
binary_entropy = _yael.binary_entropy

def ivec_unbalanced_factor(*args):
  return _yael.ivec_unbalanced_factor(*args)
ivec_unbalanced_factor = _yael.ivec_unbalanced_factor

def ivec_distance_hamming(*args):
  return _yael.ivec_distance_hamming(*args)
ivec_distance_hamming = _yael.ivec_distance_hamming

def fvec_distance_L2(*args):
  return _yael.fvec_distance_L2(*args)
fvec_distance_L2 = _yael.fvec_distance_L2

def fvec_distance_L1(*args):
  return _yael.fvec_distance_L1(*args)
fvec_distance_L1 = _yael.fvec_distance_L1

def fvec_distance_L2sqr(*args):
  return _yael.fvec_distance_L2sqr(*args)
fvec_distance_L2sqr = _yael.fvec_distance_L2sqr

def fvec_inner_product(*args):
  return _yael.fvec_inner_product(*args)
fvec_inner_product = _yael.fvec_inner_product

def fvec_to_spfvec(*args):
  return _yael.fvec_to_spfvec(*args)
fvec_to_spfvec = _yael.fvec_to_spfvec

def ivec_to_spivec(*args):
  return _yael.ivec_to_spivec(*args)
ivec_to_spivec = _yael.ivec_to_spivec

def spfvec_to_fvec(*args):
  return _yael.spfvec_to_fvec(*args)
spfvec_to_fvec = _yael.spfvec_to_fvec

def spivec_to_ivec(*args):
  return _yael.spivec_to_ivec(*args)
spivec_to_ivec = _yael.spivec_to_ivec

def spfvec_inner_product(*args):
  return _yael.spfvec_inner_product(*args)
spfvec_inner_product = _yael.spfvec_inner_product

def ivec_accumulate_slices(*args):
  return _yael.ivec_accumulate_slices(*args)
ivec_accumulate_slices = _yael.ivec_accumulate_slices

def fvec_map(*args):
  return _yael.fvec_map(*args)
fvec_map = _yael.fvec_map

def ivec_map(*args):
  return _yael.ivec_map(*args)
ivec_map = _yael.ivec_map

def fvec_imap(*args):
  return _yael.fvec_imap(*args)
fvec_imap = _yael.fvec_imap

def fvec_splat_add(*args):
  return _yael.fvec_splat_add(*args)
fvec_splat_add = _yael.fvec_splat_add

def fvec_isplat_add(*args):
  return _yael.fvec_isplat_add(*args)
fvec_isplat_add = _yael.fvec_isplat_add

def ivec_repeat_with_inc(*args):
  return _yael.ivec_repeat_with_inc(*args)
ivec_repeat_with_inc = _yael.ivec_repeat_with_inc

def fvec_cpy_subvectors(*args):
  return _yael.fvec_cpy_subvectors(*args)
fvec_cpy_subvectors = _yael.fvec_cpy_subvectors

def b2fvec_cpy_subvectors(*args):
  return _yael.b2fvec_cpy_subvectors(*args)
b2fvec_cpy_subvectors = _yael.b2fvec_cpy_subvectors

def ivec_to_fvec(*args):
  return _yael.ivec_to_fvec(*args)
ivec_to_fvec = _yael.ivec_to_fvec

def fmat_new(*args):
  return _yael.fmat_new(*args)
fmat_new = _yael.fmat_new

def fmat_new_0(*args):
  return _yael.fmat_new_0(*args)
fmat_new_0 = _yael.fmat_new_0

def fmat_mul_full(*args):
  return _yael.fmat_mul_full(*args)
fmat_mul_full = _yael.fmat_mul_full

def fmat_mul_full_nonpacked(*args):
  return _yael.fmat_mul_full_nonpacked(*args)
fmat_mul_full_nonpacked = _yael.fmat_mul_full_nonpacked

def fmat_new_mul_full(*args):
  return _yael.fmat_new_mul_full(*args)
fmat_new_mul_full = _yael.fmat_new_mul_full

def fmat_mul(*args):
  return _yael.fmat_mul(*args)
fmat_mul = _yael.fmat_mul

def fmat_mul_tl(*args):
  return _yael.fmat_mul_tl(*args)
fmat_mul_tl = _yael.fmat_mul_tl

def fmat_mul_tr(*args):
  return _yael.fmat_mul_tr(*args)
fmat_mul_tr = _yael.fmat_mul_tr

def fmat_mul_tlr(*args):
  return _yael.fmat_mul_tlr(*args)
fmat_mul_tlr = _yael.fmat_mul_tlr

def fmat_new_mul(*args):
  return _yael.fmat_new_mul(*args)
fmat_new_mul = _yael.fmat_new_mul

def fmat_new_mul_tl(*args):
  return _yael.fmat_new_mul_tl(*args)
fmat_new_mul_tl = _yael.fmat_new_mul_tl

def fmat_new_mul_tr(*args):
  return _yael.fmat_new_mul_tr(*args)
fmat_new_mul_tr = _yael.fmat_new_mul_tr

def fmat_new_mul_tlr(*args):
  return _yael.fmat_new_mul_tlr(*args)
fmat_new_mul_tlr = _yael.fmat_new_mul_tlr

def fmat_solve_ls_t(*args):
  return _yael.fmat_solve_ls_t(*args)
fmat_solve_ls_t = _yael.fmat_solve_ls_t

def fmat_print(*args):
  return _yael.fmat_print(*args)
fmat_print = _yael.fmat_print

def fmat_print_tranposed(*args):
  return _yael.fmat_print_tranposed(*args)
fmat_print_tranposed = _yael.fmat_print_tranposed

def fmat_get_submatrix(*args):
  return _yael.fmat_get_submatrix(*args)
fmat_get_submatrix = _yael.fmat_get_submatrix

def imat_get_submatrix(*args):
  return _yael.imat_get_submatrix(*args)
imat_get_submatrix = _yael.imat_get_submatrix

def fmat_new_get_columns(*args):
  return _yael.fmat_new_get_columns(*args)
fmat_new_get_columns = _yael.fmat_new_get_columns

def fmat_get_columns(*args):
  return _yael.fmat_get_columns(*args)
fmat_get_columns = _yael.fmat_get_columns

def fmat_get_rows_cols(*args):
  return _yael.fmat_get_rows_cols(*args)
fmat_get_rows_cols = _yael.fmat_get_rows_cols

def fmat_shuffle_columns(*args):
  return _yael.fmat_shuffle_columns(*args)
fmat_shuffle_columns = _yael.fmat_shuffle_columns

def fmat_new_get_row(*args):
  return _yael.fmat_new_get_row(*args)
fmat_new_get_row = _yael.fmat_new_get_row

def fmat_new_get_rows(*args):
  return _yael.fmat_new_get_rows(*args)
fmat_new_get_rows = _yael.fmat_new_get_rows

def fmat_sum_columns(*args):
  return _yael.fmat_sum_columns(*args)
fmat_sum_columns = _yael.fmat_sum_columns

def fmat_new_sum_columns(*args):
  return _yael.fmat_new_sum_columns(*args)
fmat_new_sum_columns = _yael.fmat_new_sum_columns

def fmat_sum_rows(*args):
  return _yael.fmat_sum_rows(*args)
fmat_sum_rows = _yael.fmat_sum_rows

def fmat_new_sum_rows(*args):
  return _yael.fmat_new_sum_rows(*args)
fmat_new_sum_rows = _yael.fmat_new_sum_rows

def fmat_new_vstack(*args):
  return _yael.fmat_new_vstack(*args)
fmat_new_vstack = _yael.fmat_new_vstack

def fmat_new_transp(*args):
  return _yael.fmat_new_transp(*args)
fmat_new_transp = _yael.fmat_new_transp

def fmat_splat_separable(*args):
  return _yael.fmat_splat_separable(*args)
fmat_splat_separable = _yael.fmat_splat_separable

def fmat_splat_separable_1D(*args):
  return _yael.fmat_splat_separable_1D(*args)
fmat_splat_separable_1D = _yael.fmat_splat_separable_1D

def imat_joint_histogram(*args):
  return _yael.imat_joint_histogram(*args)
imat_joint_histogram = _yael.imat_joint_histogram

def fmat_remove_0_columns(*args):
  return _yael.fmat_remove_0_columns(*args)
fmat_remove_0_columns = _yael.fmat_remove_0_columns

def fmat_normalize_columns_l2sqr_pow(*args):
  return _yael.fmat_normalize_columns_l2sqr_pow(*args)
fmat_normalize_columns_l2sqr_pow = _yael.fmat_normalize_columns_l2sqr_pow

def fmat_normalize_columns_l2sqr_pow_robust(*args):
  return _yael.fmat_normalize_columns_l2sqr_pow_robust(*args)
fmat_normalize_columns_l2sqr_pow_robust = _yael.fmat_normalize_columns_l2sqr_pow_robust

def fmat_new_rand_gauss(*args):
  return _yael.fmat_new_rand_gauss(*args)
fmat_new_rand_gauss = _yael.fmat_new_rand_gauss

def random_orthogonal_basis(*args):
  return _yael.random_orthogonal_basis(*args)
random_orthogonal_basis = _yael.random_orthogonal_basis

def hadamard(*args):
  return _yael.hadamard(*args)
hadamard = _yael.hadamard

def fmat_center_columns(*args):
  return _yael.fmat_center_columns(*args)
fmat_center_columns = _yael.fmat_center_columns

def fmat_subtract_from_columns(*args):
  return _yael.fmat_subtract_from_columns(*args)
fmat_subtract_from_columns = _yael.fmat_subtract_from_columns

def fmat_add_to_columns(*args):
  return _yael.fmat_add_to_columns(*args)
fmat_add_to_columns = _yael.fmat_add_to_columns

def fmat_rev_subtract_from_columns(*args):
  return _yael.fmat_rev_subtract_from_columns(*args)
fmat_rev_subtract_from_columns = _yael.fmat_rev_subtract_from_columns

def fmat_new_covariance(*args):
  return _yael.fmat_new_covariance(*args)
fmat_new_covariance = _yael.fmat_new_covariance

def fmat_new_pca(*args):
  return _yael.fmat_new_pca(*args)
fmat_new_pca = _yael.fmat_new_pca

def fmat_new_pca_part(*args):
  return _yael.fmat_new_pca_part(*args)
fmat_new_pca_part = _yael.fmat_new_pca_part

def fmat_svd_partial(*args):
  return _yael.fmat_svd_partial(*args)
fmat_svd_partial = _yael.fmat_svd_partial

def fmat_svd_partial_full(*args):
  return _yael.fmat_svd_partial_full(*args)
fmat_svd_partial_full = _yael.fmat_svd_partial_full

def fmat_new_pca_from_covariance(*args):
  return _yael.fmat_new_pca_from_covariance(*args)
fmat_new_pca_from_covariance = _yael.fmat_new_pca_from_covariance

def fmat_pca_from_covariance(*args):
  return _yael.fmat_pca_from_covariance(*args)
fmat_pca_from_covariance = _yael.fmat_pca_from_covariance
class pca_online_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pca_online_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pca_online_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _yael.pca_online_s_n_set
    __swig_getmethods__["n"] = _yael.pca_online_s_n_get
    if _newclass:n = _swig_property(_yael.pca_online_s_n_get, _yael.pca_online_s_n_set)
    __swig_setmethods__["d"] = _yael.pca_online_s_d_set
    __swig_getmethods__["d"] = _yael.pca_online_s_d_get
    if _newclass:d = _swig_property(_yael.pca_online_s_d_get, _yael.pca_online_s_d_set)
    __swig_setmethods__["mu"] = _yael.pca_online_s_mu_set
    __swig_getmethods__["mu"] = _yael.pca_online_s_mu_get
    if _newclass:mu = _swig_property(_yael.pca_online_s_mu_get, _yael.pca_online_s_mu_set)
    __swig_setmethods__["cov"] = _yael.pca_online_s_cov_set
    __swig_getmethods__["cov"] = _yael.pca_online_s_cov_get
    if _newclass:cov = _swig_property(_yael.pca_online_s_cov_get, _yael.pca_online_s_cov_set)
    __swig_setmethods__["eigvec"] = _yael.pca_online_s_eigvec_set
    __swig_getmethods__["eigvec"] = _yael.pca_online_s_eigvec_get
    if _newclass:eigvec = _swig_property(_yael.pca_online_s_eigvec_get, _yael.pca_online_s_eigvec_set)
    __swig_setmethods__["eigval"] = _yael.pca_online_s_eigval_set
    __swig_getmethods__["eigval"] = _yael.pca_online_s_eigval_get
    if _newclass:eigval = _swig_property(_yael.pca_online_s_eigval_get, _yael.pca_online_s_eigval_set)
    def __init__(self): 
        this = _yael.new_pca_online_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_pca_online_s
    __del__ = lambda self : None;
pca_online_s_swigregister = _yael.pca_online_s_swigregister
pca_online_s_swigregister(pca_online_s)


def pca_online_new(*args):
  return _yael.pca_online_new(*args)
pca_online_new = _yael.pca_online_new

def pca_online_delete(*args):
  return _yael.pca_online_delete(*args)
pca_online_delete = _yael.pca_online_delete

def pca_online_accu(*args):
  return _yael.pca_online_accu(*args)
pca_online_accu = _yael.pca_online_accu

def pca_online_cov(*args):
  return _yael.pca_online_cov(*args)
pca_online_cov = _yael.pca_online_cov

def pca_online_complete(*args):
  return _yael.pca_online_complete(*args)
pca_online_complete = _yael.pca_online_complete

def pca_online_complete_part(*args):
  return _yael.pca_online_complete_part(*args)
pca_online_complete_part = _yael.pca_online_complete_part

def pca_online_project(*args):
  return _yael.pca_online_project(*args)
pca_online_project = _yael.pca_online_project

def eigs_sym(*args):
  return _yael.eigs_sym(*args)
eigs_sym = _yael.eigs_sym

def geigs_sym(*args):
  return _yael.geigs_sym(*args)
geigs_sym = _yael.geigs_sym

def eigs_reorder(*args):
  return _yael.eigs_reorder(*args)
eigs_reorder = _yael.eigs_reorder

def eigs_sym_part(*args):
  return _yael.eigs_sym_part(*args)
eigs_sym_part = _yael.eigs_sym_part

def arpack_eigs_begin(*args):
  return _yael.arpack_eigs_begin(*args)
arpack_eigs_begin = _yael.arpack_eigs_begin

def arpack_eigs_step(*args):
  return _yael.arpack_eigs_step(*args)
arpack_eigs_step = _yael.arpack_eigs_step

def arpack_eigs_end(*args):
  return _yael.arpack_eigs_end(*args)
arpack_eigs_end = _yael.arpack_eigs_end
class gmm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gmm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gmm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _yael.gmm_t_d_set
    __swig_getmethods__["d"] = _yael.gmm_t_d_get
    if _newclass:d = _swig_property(_yael.gmm_t_d_get, _yael.gmm_t_d_set)
    __swig_setmethods__["k"] = _yael.gmm_t_k_set
    __swig_getmethods__["k"] = _yael.gmm_t_k_get
    if _newclass:k = _swig_property(_yael.gmm_t_k_get, _yael.gmm_t_k_set)
    __swig_setmethods__["w"] = _yael.gmm_t_w_set
    __swig_getmethods__["w"] = _yael.gmm_t_w_get
    if _newclass:w = _swig_property(_yael.gmm_t_w_get, _yael.gmm_t_w_set)
    __swig_setmethods__["mu"] = _yael.gmm_t_mu_set
    __swig_getmethods__["mu"] = _yael.gmm_t_mu_get
    if _newclass:mu = _swig_property(_yael.gmm_t_mu_get, _yael.gmm_t_mu_set)
    __swig_setmethods__["sigma"] = _yael.gmm_t_sigma_set
    __swig_getmethods__["sigma"] = _yael.gmm_t_sigma_get
    if _newclass:sigma = _swig_property(_yael.gmm_t_sigma_get, _yael.gmm_t_sigma_set)
    def __init__(self): 
        this = _yael.new_gmm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_gmm_t
    __del__ = lambda self : None;
gmm_t_swigregister = _yael.gmm_t_swigregister
gmm_t_swigregister(gmm_t)

GMM_FLAGS_W = _yael.GMM_FLAGS_W
GMM_FLAGS_NO_NORM = _yael.GMM_FLAGS_NO_NORM
GMM_FLAGS_1SIGMA = _yael.GMM_FLAGS_1SIGMA
GMM_FLAGS_PURE_KMEANS = _yael.GMM_FLAGS_PURE_KMEANS
GMM_FLAGS_SIGMA = _yael.GMM_FLAGS_SIGMA
GMM_FLAGS_MU = _yael.GMM_FLAGS_MU

def gmm_learn(*args):
  return _yael.gmm_learn(*args)
gmm_learn = _yael.gmm_learn

def gmm_print(*args):
  return _yael.gmm_print(*args)
gmm_print = _yael.gmm_print

def gmm_delete(*args):
  return _yael.gmm_delete(*args)
gmm_delete = _yael.gmm_delete

def gmm_compute_p(*args):
  return _yael.gmm_compute_p(*args)
gmm_compute_p = _yael.gmm_compute_p

def gmm_fisher(*args):
  return _yael.gmm_fisher(*args)
gmm_fisher = _yael.gmm_fisher

def gmm_fisher_from_posteriors(*args):
  return _yael.gmm_fisher_from_posteriors(*args)
gmm_fisher_from_posteriors = _yael.gmm_fisher_from_posteriors

def gmm_fisher_sizeof(*args):
  return _yael.gmm_fisher_sizeof(*args)
gmm_fisher_sizeof = _yael.gmm_fisher_sizeof

def gmm_fisher_spatial(*args):
  return _yael.gmm_fisher_spatial(*args)
gmm_fisher_spatial = _yael.gmm_fisher_spatial

def gmm_write(*args):
  return _yael.gmm_write(*args)
gmm_write = _yael.gmm_write

def gmm_read(*args):
  return _yael.gmm_read(*args)
gmm_read = _yael.gmm_read

def gmm_compute_p_thread(*args):
  return _yael.gmm_compute_p_thread(*args)
gmm_compute_p_thread = _yael.gmm_compute_p_thread

def vlad_compute(*args):
  return _yael.vlad_compute(*args)
vlad_compute = _yael.vlad_compute

def vlad_compute_weighted(*args):
  return _yael.vlad_compute_weighted(*args)
vlad_compute_weighted = _yael.vlad_compute_weighted

def vlad_compute_subsets(*args):
  return _yael.vlad_compute_subsets(*args)
vlad_compute_subsets = _yael.vlad_compute_subsets

def bof_compute(*args):
  return _yael.bof_compute(*args)
bof_compute = _yael.bof_compute

def bof_compute_ma(*args):
  return _yael.bof_compute_ma(*args)
bof_compute_ma = _yael.bof_compute_ma

def bof_compute_subsets(*args):
  return _yael.bof_compute_subsets(*args)
bof_compute_subsets = _yael.bof_compute_subsets
class nnlist_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nnlist_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nnlist_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _yael.nnlist_s_n_set
    __swig_getmethods__["n"] = _yael.nnlist_s_n_get
    if _newclass:n = _swig_property(_yael.nnlist_s_n_get, _yael.nnlist_s_n_set)
    __swig_setmethods__["k"] = _yael.nnlist_s_k_set
    __swig_getmethods__["k"] = _yael.nnlist_s_k_get
    if _newclass:k = _swig_property(_yael.nnlist_s_k_get, _yael.nnlist_s_k_set)
    __swig_setmethods__["idx"] = _yael.nnlist_s_idx_set
    __swig_getmethods__["idx"] = _yael.nnlist_s_idx_get
    if _newclass:idx = _swig_property(_yael.nnlist_s_idx_get, _yael.nnlist_s_idx_set)
    __swig_setmethods__["dis"] = _yael.nnlist_s_dis_set
    __swig_getmethods__["dis"] = _yael.nnlist_s_dis_get
    if _newclass:dis = _swig_property(_yael.nnlist_s_dis_get, _yael.nnlist_s_dis_set)
    def __init__(self): 
        this = _yael.new_nnlist_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_nnlist_s
    __del__ = lambda self : None;
nnlist_s_swigregister = _yael.nnlist_s_swigregister
nnlist_s_swigregister(nnlist_s)


def nnlist_new(*args):
  return _yael.nnlist_new(*args)
nnlist_new = _yael.nnlist_new

def nnlist_new_noalloc(*args):
  return _yael.nnlist_new_noalloc(*args)
nnlist_new_noalloc = _yael.nnlist_new_noalloc

def nnlist_delete(*args):
  return _yael.nnlist_delete(*args)
nnlist_delete = _yael.nnlist_delete

def nnlist_addn(*args):
  return _yael.nnlist_addn(*args)
nnlist_addn = _yael.nnlist_addn
KMLSH_NT = _yael.KMLSH_NT
KMLSH_QUIET = _yael.KMLSH_QUIET
KMLSH_WRITE_INTER_NHASH = _yael.KMLSH_WRITE_INTER_NHASH
KMLSH_BLOCK_SIZE = _yael.KMLSH_BLOCK_SIZE
KMLSH_NB_ITER_MAX = _yael.KMLSH_NB_ITER_MAX
KMLSH_VECTYPE_FVEC = _yael.KMLSH_VECTYPE_FVEC
KMLSH_VECTYPE_BVEC = _yael.KMLSH_VECTYPE_BVEC
class kmlsh_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmlsh_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmlsh_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nhash"] = _yael.kmlsh_s_nhash_set
    __swig_getmethods__["nhash"] = _yael.kmlsh_s_nhash_get
    if _newclass:nhash = _swig_property(_yael.kmlsh_s_nhash_get, _yael.kmlsh_s_nhash_set)
    __swig_setmethods__["d"] = _yael.kmlsh_s_d_set
    __swig_getmethods__["d"] = _yael.kmlsh_s_d_get
    if _newclass:d = _swig_property(_yael.kmlsh_s_d_get, _yael.kmlsh_s_d_set)
    __swig_setmethods__["nclust"] = _yael.kmlsh_s_nclust_set
    __swig_getmethods__["nclust"] = _yael.kmlsh_s_nclust_get
    if _newclass:nclust = _swig_property(_yael.kmlsh_s_nclust_get, _yael.kmlsh_s_nclust_set)
    __swig_setmethods__["centroids"] = _yael.kmlsh_s_centroids_set
    __swig_getmethods__["centroids"] = _yael.kmlsh_s_centroids_get
    if _newclass:centroids = _swig_property(_yael.kmlsh_s_centroids_get, _yael.kmlsh_s_centroids_set)
    def __init__(self): 
        this = _yael.new_kmlsh_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_kmlsh_s
    __del__ = lambda self : None;
kmlsh_s_swigregister = _yael.kmlsh_s_swigregister
kmlsh_s_swigregister(kmlsh_s)

class kmlsh_idx_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmlsh_idx_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmlsh_idx_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nhash"] = _yael.kmlsh_idx_s_nhash_set
    __swig_getmethods__["nhash"] = _yael.kmlsh_idx_s_nhash_get
    if _newclass:nhash = _swig_property(_yael.kmlsh_idx_s_nhash_get, _yael.kmlsh_idx_s_nhash_set)
    __swig_setmethods__["n"] = _yael.kmlsh_idx_s_n_set
    __swig_getmethods__["n"] = _yael.kmlsh_idx_s_n_get
    if _newclass:n = _swig_property(_yael.kmlsh_idx_s_n_get, _yael.kmlsh_idx_s_n_set)
    __swig_setmethods__["nclust"] = _yael.kmlsh_idx_s_nclust_set
    __swig_getmethods__["nclust"] = _yael.kmlsh_idx_s_nclust_get
    if _newclass:nclust = _swig_property(_yael.kmlsh_idx_s_nclust_get, _yael.kmlsh_idx_s_nclust_set)
    __swig_setmethods__["perm"] = _yael.kmlsh_idx_s_perm_set
    __swig_getmethods__["perm"] = _yael.kmlsh_idx_s_perm_get
    if _newclass:perm = _swig_property(_yael.kmlsh_idx_s_perm_get, _yael.kmlsh_idx_s_perm_set)
    __swig_setmethods__["boundaries"] = _yael.kmlsh_idx_s_boundaries_set
    __swig_getmethods__["boundaries"] = _yael.kmlsh_idx_s_boundaries_get
    if _newclass:boundaries = _swig_property(_yael.kmlsh_idx_s_boundaries_get, _yael.kmlsh_idx_s_boundaries_set)
    def __init__(self): 
        this = _yael.new_kmlsh_idx_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_kmlsh_idx_s
    __del__ = lambda self : None;
kmlsh_idx_s_swigregister = _yael.kmlsh_idx_s_swigregister
kmlsh_idx_s_swigregister(kmlsh_idx_s)


def kmlsh_new(*args):
  return _yael.kmlsh_new(*args)
kmlsh_new = _yael.kmlsh_new

def kmlsh_delete(*args):
  return _yael.kmlsh_delete(*args)
kmlsh_delete = _yael.kmlsh_delete

def kmlsh_learn_xvec(*args):
  return _yael.kmlsh_learn_xvec(*args)
kmlsh_learn_xvec = _yael.kmlsh_learn_xvec

def kmlsh_new_learn_bvec(*args):
  return _yael.kmlsh_new_learn_bvec(*args)
kmlsh_new_learn_bvec = _yael.kmlsh_new_learn_bvec

def kmlsh_new_learn_fvec(*args):
  return _yael.kmlsh_new_learn_fvec(*args)
kmlsh_new_learn_fvec = _yael.kmlsh_new_learn_fvec

def kmlsh_match_xvec(*args):
  return _yael.kmlsh_match_xvec(*args)
kmlsh_match_xvec = _yael.kmlsh_match_xvec

def kmlsh_match_bvec(*args):
  return _yael.kmlsh_match_bvec(*args)
kmlsh_match_bvec = _yael.kmlsh_match_bvec

def kmlsh_match_fvec(*args):
  return _yael.kmlsh_match_fvec(*args)
kmlsh_match_fvec = _yael.kmlsh_match_fvec

def kmlsh_ann_xvec(*args):
  return _yael.kmlsh_ann_xvec(*args)
kmlsh_ann_xvec = _yael.kmlsh_ann_xvec

def kmlsh_ann_bvec(*args):
  return _yael.kmlsh_ann_bvec(*args)
kmlsh_ann_bvec = _yael.kmlsh_ann_bvec

def kmlsh_ann_fvec(*args):
  return _yael.kmlsh_ann_fvec(*args)
kmlsh_ann_fvec = _yael.kmlsh_ann_fvec

def kmlsh_idx_new(*args):
  return _yael.kmlsh_idx_new(*args)
kmlsh_idx_new = _yael.kmlsh_idx_new

def kmlsh_idx_delete(*args):
  return _yael.kmlsh_idx_delete(*args)
kmlsh_idx_delete = _yael.kmlsh_idx_delete

def kmlsh_idx_new_compile_xvec(*args):
  return _yael.kmlsh_idx_new_compile_xvec(*args)
kmlsh_idx_new_compile_xvec = _yael.kmlsh_idx_new_compile_xvec

def kmlsh_idx_new_compile_bvec(*args):
  return _yael.kmlsh_idx_new_compile_bvec(*args)
kmlsh_idx_new_compile_bvec = _yael.kmlsh_idx_new_compile_bvec

def kmlsh_idx_new_compile_fvec(*args):
  return _yael.kmlsh_idx_new_compile_fvec(*args)
kmlsh_idx_new_compile_fvec = _yael.kmlsh_idx_new_compile_fvec

def kmlsh_idx_get_nvec(*args):
  return _yael.kmlsh_idx_get_nvec(*args)
kmlsh_idx_get_nvec = _yael.kmlsh_idx_get_nvec

def kmlsh_idx_get_maxincell(*args):
  return _yael.kmlsh_idx_get_maxincell(*args)
kmlsh_idx_get_maxincell = _yael.kmlsh_idx_get_maxincell

def kmlsh_idx_get_vecids(*args):
  return _yael.kmlsh_idx_get_vecids(*args)
kmlsh_idx_get_vecids = _yael.kmlsh_idx_get_vecids

def kmeans_cohash_xvec(*args):
  return _yael.kmeans_cohash_xvec(*args)
kmeans_cohash_xvec = _yael.kmeans_cohash_xvec

def kmeans_cohash_bvec(*args):
  return _yael.kmeans_cohash_bvec(*args)
kmeans_cohash_bvec = _yael.kmeans_cohash_bvec

def kmeans_cohash_fvec(*args):
  return _yael.kmeans_cohash_fvec(*args)
kmeans_cohash_fvec = _yael.kmeans_cohash_fvec

def kmlsh_write(*args):
  return _yael.kmlsh_write(*args)
kmlsh_write = _yael.kmlsh_write

def kmlsh_read(*args):
  return _yael.kmlsh_read(*args)
kmlsh_read = _yael.kmlsh_read

def kmlsh_idx_write(*args):
  return _yael.kmlsh_idx_write(*args)
kmlsh_idx_write = _yael.kmlsh_idx_write

def kmlsh_idx_read(*args):
  return _yael.kmlsh_idx_read(*args)
kmlsh_idx_read = _yael.kmlsh_idx_read

def free(*args):
  return _yael.free(*args)
free = _yael.free

def count_cpu():
  return _yael.count_cpu()
count_cpu = _yael.count_cpu

def log2(*args):
  return _yael.log2(*args)
log2 = _yael.log2

def memalign(*args):
  return _yael.memalign(*args)
memalign = _yael.memalign

def getmillisecs():
  return _yael.getmillisecs()
getmillisecs = _yael.getmillisecs

def compute_tasks(*args):
  return _yael.compute_tasks(*args)
compute_tasks = _yael.compute_tasks

def common_srandom(*args):
  return _yael.common_srandom(*args)
common_srandom = _yael.common_srandom
# This file is compatible with both classic and new-style classes.


